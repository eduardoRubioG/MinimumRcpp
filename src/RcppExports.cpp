// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// kintersection
int kintersection(const int i);
RcppExport SEXP _MinimumRcpp_kintersection(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(kintersection(i));
    return rcpp_result_gen;
END_RCPP
}
// inner
int inner(const int i);
RcppExport SEXP _MinimumRcpp_inner(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(inner(i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MinimumRcpp_kintersection", (DL_FUNC) &_MinimumRcpp_kintersection, 1},
    {"_MinimumRcpp_inner", (DL_FUNC) &_MinimumRcpp_inner, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MinimumRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
